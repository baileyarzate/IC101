InTerminator = CR LF;
OutTerminator = LF;
ReplyTimeout = 1000;
ReadTimeout = 100;

#If command has a '?', use CR LF
#If command does not have '?', use LF ACK

######working, do not edit#####
###############################################

test {
	out "*TST?";
	in "*TST?\n\x06%d";
}

getID { 
	wait 50;
	ExtraInput = Ignore;
	out "*IDN?";
	in "*IDN?\n\x06%(\$1)[_a-zA-Z0-9],%(\$2)[_a-zA-Z0-9-],%(\$3)[0-9],%(\$4)s";
}

readCalibGain{
	ExtraInput = Ignore;
	out "CALIB:GAI?";
	in "CALIB:GAI?\n\x06%(\$1)[_a-zA-Z0-9],%(\$2)[0-9.e+-],%(\$3)[_a-zA-Z0-9-+]";
}

error{
	out "SYST:ERR?";
	in "SYST:ERR?\n\x06%39c";
}

clearStatus{
	#InTerminator = LF ACK;
	out "*CLS 1";
	wait 1000;
	#in "*CLS\n\x06";
	# out "*CLS\n\x06%39c";
}

setCapacitor{
	out "CONF:CAP %{0|1}";
}

setFreqMode{
	out "CONF:FREQ %d";
}

setLogMode{
	out "CONF:LOG %d";
}

setMonitor{
	out "CONF:MON %{0|1|2|3|4}";
}

setPolarity{
	out "CONF:POL %{0|1}";
}

setCalibSource{
	out "CALIB:SOUR %{0|1}";
}

statusByte{
	out "*STB?";
	in "*STB?\n\x06%d";
}

readDigital{
	out "READ:DIG?";
	in "READ:DIG?\n\x06%d";
}

readCharge{
	out "READ:CHA?";
	in "READ:CHA?\n\x06%(\$1)e S,%(\$2)e C,%d";
	#in "READ:CHA?\n\x06%(\$1)[ ._+a-zA-Z0-9-],%(\$2)[ ._+a-zA-Z0-9-],%(\$3)[_a-zA-Z0-9-+]";
}

readCurrent{
	out "READ:CURR?";
	in "READ:CURR?\n\x06%(\$1)e S,%(\$2)e A,%d";
	#in "READ:CURR?\n\x06%(\$1)[ ._+a-zA-Z0-9-],%(\$2)[ ._+a-zA-Z0-9-],%(\$3)[_a-zA-Z0-9-+]";
}

triggerCount{
	out "TRIG:COUN?"; 
	in "TRIG:COUN?\n\x06%d";
}

readIntAvg{
	out "CONF:INT?"; 
	in "CONF:INT?\n\x06%d";
}
setIntAvg{
	out "CONF:INT %d";
}

readADC{
	out "CONF:READ?"; 
	in "CONF:READ?\n\x06%d";
}
setADC{
	out "CONF:READ %d";
}

readPeriod{
	out "CONF:PER?"; 
	#in "CONF:PER?\n\x06%e %(EGU)c";
	in "CONF:PER?\n\x06%39c";
}
setPeriod{
	#InTerminator = LF ACK;
	out "CONF:PER %e";
	#in "CONF:PER %e\n\x06";
}

readRange {
	out "CONF:RANG?";
	in "CONF:RANG?\n\x06%39c";
	#in "CONF:RANG?\n\x06%e %(EGU)c";
}

setRange {
	InTerminator = LF ACK;
	ExtraInput = Ignore;
	out "CONF:RANG %e"; 
	in "CONF:RANG %e";
}

readRes{
	#ExtraInput = Ignore;
	out "CONF:RES?"; 
	in "CONF:RES?\n\x06%39c";
}
setRes{
	out "CONF:RES %d";
}

readOpCondition{
	out "STAT:OPER:COND?";
	in "STAT:OPER:COND?\n\x06%d";
}

readOpEvnt{
	out "STAT:OPER:EVEN?";
	in "STAT:OPER:EVEN?\n\x06%d";
}

readOpEnable{
	out "STAT:OPER:ENAB?";
	in "STAT:OPER:ENAB?\n\x06%d";
}

setOpEnable{
	#InTerminator = LF ACK;
	out "STAT:OPER:ENAB %d";
}

readQCondition{
	out "STAT:QUES:COND?";
	in "STAT:QUES:COND?\n\x06%d";
}

readQEvnt{
	out "STAT:QUES:EVEN?";
	in "STAT:QUES:EVEN?\n\x06%d";
}

readQEnable{
	out "STAT:QUES:ENAB?";
	in "STAT:QUES:ENAB?\n\x06%d";
}

setQEnable{
	#InTerminator = LF ACK;
	out "STAT:QUES:ENAB %d";
}

readConfSwitch { 
	ExtraInput = Ignore;
	out "CONF:SWIT?";
	in "CONF:SWIT?\n\x06%(\$1)[0-9 uS-],%(\$2)[0-9 uS-],%(\$3)[0-9 uS-],%(\$4)[0-9 uS-]";
}

setHVMax {
	#InTerminator = LF ACK;
	out "CONF:HIVO:MAX %d"; 
	#in "CONF:HIVO:MAX %d";
}

getHVMax {
	out "CONF:HIVO:MAX?"; 
	in "CONF:HIVO:MAX?\n\x06%d";
}

readHV{
	out "READ:HIVO?";
	in "READ:HIVO?\n\x06%39c";
}

save{
	#InTerminator = LF ACK;
	out "*SAV 1";
	wait 1000;
	#in "*SAV\n\x06";
}
recallCalib{
	#ExtraInput = Ignore;
	#InTerminator = LF; # ACK;
	out "CALIB:RCL 1";
	wait 1000;
	#in "CALIB:RCL\n\x06";
}

init{
	#InTerminator = LF ACK;
	out "INIT 1";
	#in "INIT\n\x06";
	wait 1000;
}

reset{
	#ExtraInput = Ignore;
	#InTerminator = LF ACK;
	out "*RST 1";
	wait 1000;
	#in "*RST\n\x06";
}

abort{
	#InTerminator = LF ACK;
	ExtraInput = Ignore;
	out "ABOR 1";
	wait 1000;
	#in "ABOR\n\x06";
}

setConfigureSwitch{
	separator = ", ";
	out "CONF:SWIT %s";
}

#############maybe want these in engineering units (ex. 1.00000e+00)
readScale{
	out "CONF:SCA?"; 
	in "CONF:SCA?\n\x06%e";
}
setScale{
	#InTerminator = LF ACK;
	out "CONF:SCA %e";
}

readEvntStat{
	ExtraInput = Ignore;
	out "*ESE?"; 
	in "*ESE?\n\x06%d";
}

setEvntStat{
	#InTerminator = LF ACK;
	out "*ESE %d"; 
	#in "*ESE %d\n\x06";
}

######Unsure about these, it even doesn't change in telnet
#most likely not needed
#setDelay{
#	InTerminator = LF ACK;
#	out "TRIG:DELAY %e";
#	#in "TRIG:DELAY %e";
#}
#readDelay{
#	out "TRIG:DELAY?"; 
#	in "TRIG:DELAY?\n\x06%39c";
#	#in "TRIG:DELAY?\n\x06%e %(EGU)c";	
#}

setVoltage{
	#InTerminator = LF ACK;
	out "CONF:HIVO:SET %d";
	#in "CONF:HIVO:SET %d";
}
readVoltage{
	out "CONF:HIVO:SET?"; 
	in "CONF:HIVO:SET?\n\x06%d";
}
###################
#################################
##### work in progress ###
####### write multiple values
#set values of the range (PTC)
##error here and doesn't change in telnet
#setCalibGain{
#	separator = ", ";
#	out "CALIB:GAI %s"; 
#}