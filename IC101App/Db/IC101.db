record(stringout, "$(P)$(R)Test")
{       
        field(DESC, "TEST - should return 1")
        field(DTYP, "stream") 
        field(OUT, "@IC101.proto test $(PORT)")
        field(PINI, "YES")
        field(SCAN, "10 second") 
}
########################################################
record(stringout, "$(P)$(R)ID")
{
    field(DESC, "IC101 Serial Information")
    field(DTYP, "stream")
    field(OUT, "@IC101.proto getID($(P)$(R)Manufactuer,$(P)$(R)Model,$(P)$(R)Serial_N,$(P)$(R)Firmware) $(PORT)")
    field(PINI, "YES")
    field(SCAN, "Passive")
}

record(stringin,"$(P)$(R)Manufactuer")
{
        field(DESC, "Manufacturer")
}

record(stringin, "$(P)$(R)Model")
{
        field(DESC, "Model")
}

record(stringin, "$(P)$(R)Serial_N")
{
        field(DESC, "Serial Number")
}

record(stringin, "$(P)$(R)Firmware")
{
        field(DESC, "Firmware Version")
}
#########################################################
#######################################################
record(stringout, "$(P)$(R)ReadCalibGain")
{
        field(DESC, "Query gain for each channel")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto readCalibGain($(P)$(R)GetCh1,$(P)$(R)GetCh2,$(P)$(R)GetCh3) $(PORT)")
        field(PINI, "NO")
        field(SCAN, "1 second")
}
record(stringin,"$(P)$(R)GetCh1")
{
        field(DESC, "Channel 1")
}

record(stringin, "$(P)$(R)GetCh2")
{
        field(DESC, "Channel 2")
}

record(stringin, "$(P)$(R)GetCh3")
{
        field(DESC, "Channel 3")
}
#############################################################

record(stringout, "$(P)$(R)Error")
{       
        field(DESC, "Error")
        field(DTYP, "stream") 
        field(OUT, "@IC101.proto error $(PORT)")
        field(PINI, "YES")
        field(SCAN, "2 second") 
}

record(ao, "$(P)$(R)ClearStatus")
{
        field(DESC, "Clear all event registers & error queue")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto clearStatus $(PORT)")
        field(PINI, "YES")
        field(SCAN, "Passive")
}

record(bo, "$(P)$(R)SetCapacitor")
{
        field(DESC, "Set Capacitor- 0=(100 pF), 1=(3300 pF)")
        field(DTYP, "stream")
	field(ZNAM, "100pF")
    	field(ONAM, "3300pF")
    	field(OUT, "@IC101.proto setCapacitor $(PORT)")
    	field(PINI, "NO")
    	field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)SetFreqMode")
{
        field(DESC, "Set Freq- 1=abs val, 2=pos, 3=neg")
        field(DTYP, "stream")
        field(ONST, "Absolute value")
        field(ONVL, "1")
        field(TWST, "Postivie Numbers")
        field(TWVL, "2")
        field(THST, "Negative Numbers")
        field(THVL, "3")
        field(OUT, "@IC101.proto setFreqMode $(PORT)")
        field(PINI, "NO")
        field(VAL, "1")
        field(SCAN, "Passive")
}

record(bo, "$(P)$(R)SetLogMode")
{
        field(DESC, "Log Mode- 0=linear, 1=logarithmic")
        field(DTYP, "stream")
	field(ZNAM, "Linear Mode")
    	field(ONAM, "Logarithmic Mode")
    	field(OUT, "@IC101.proto setLogMode $(PORT)")
    	field(PINI, "NO")
    	field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)SetMonitor")
{
        field(DESC, "Set Monitor 0,1,2,3,4")
        field(DTYP, "stream")
        field(ZRST, "1000000 Hz")
        field(ZRVL, "0")
        field(ONST, "100000 Hz")
        field(ONVL, "1")
        field(TWST, "10000 Hz")
        field(TWVL, "2")
        field(THST, "1000 Hz")
        field(THVL, "3")
        field(FRST, "100 Hz")
        field(FRVL, "4")
        field(OUT, "@IC101.proto setMonitor $(PORT)")
        field(PINI, "NO")
        field(VAL, "0")
        field(SCAN, "Passive")
}

record(bo, "$(P)$(R)SetPolarity")
{
        field(DESC, "Device polarity")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto setPolarity $(PORT)")
        field(ZNAM, "Rising edge")
        field(ONAM, "Falling edge")
        field(VAL, "0")
        field(PINI, "NO")
        field(SCAN, "Passive")
}

record(bo, "$(P)$(R)SetCalibSource")
{
        field(DESC, "Set internal calib source, 0=off, 1=on")
        field(DTYP, "stream")
	field(ZNAM, "off")
    	field(ONAM, "on")
    	field(OUT, "@IC101.proto setCalibSource $(PORT)")
    	field(PINI, "NO")
    	field(SCAN, "Passive")
}

record(stringout, "$(P)$(R)StatusByte")
{
        field(DESC, "Read status byte query")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto statusByte $(PORT)")
        field(PINI, "YES")
        field(SCAN, "Passive")
}

record(ao, "$(P)$(R)ReadDigital")
{       
        field(DESC, "Read Digitals")
        field(DTYP, "stream") 
        field(OUT, "@IC101.proto readDigital $(PORT)")
        field(PINI, "YES")
        field(SCAN, "Passive") 
}

############################### Read Charge
record(stringout, "$(P)$(R)ReadCharge")
{
        field(DESC, "Get charge and flags")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto readCharge($(P)$(R)UnknownS1,$(P)$(R)Coulombs,$(P)$(R)ChargeRangeFlag) $(PORT)")
        field(PINI, "YES")
        field(SCAN, "1 second")
}
record(stringin,"$(P)$(R)UnknownS1")
{
        field(DESC, "Unknown, could be seconds")
}
record(stringin, "$(P)$(R)Coulombs")
{
        field(DESC, "Get charge of device in columbs")
}
record(stringin, "$(P)$(R)ChargeRangeFlag")
{
        field(DESC, "Over range flags")
}
###############################

############################### Read Current
record(stringout, "$(P)$(R)ReadCurrent")
{
        field(DESC, "Get current and flags")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto readCurrent($(P)$(R)UnknownS2,$(P)$(R)Amps,$(P)$(R)CurrentRangeFlag) $(PORT)")
        field(PINI, "YES")
        field(SCAN, "1 second")
}
record(stringin,"$(P)$(R)UnknownS2")
{
        field(DESC, "Unknown, could be seconds")
}
record(stringin, "$(P)$(R)Amps")
{
        field(DESC, "Get current of device in amps")
}
record(stringin, "$(P)$(R)CurrentRangeFlag")
{
        field(DESC, "Over range flags")
}
################################

record(ao, "$(P)$(R)TriggerCount")
{
        field(DESC, "Query trigger count since last INIT")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto triggerCount $(PORT)")
        field(PINI, "NO")
        field(SCAN, "1 second")
}

record(ao,"$(P)$(R)ReadIntAvg")
{
       field(DESC, "# of integrations to avg per read")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readIntAvg $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}

record(ao,"$(P)$(R)SetIntAvg")
{
       field(DESC, "# of integrations to avg per read")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setIntAvg $(PORT)")
       field(LOW, "1")
       field(HIGH, "15")
       field(LSV, "MAJOR")
       field(HSV, "MAJOR")
       field(VAL, "1")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao,"$(P)$(R)ReadADC")
{
       field(DESC, "# of ADC readings to be taken")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readADC $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}

record(ao,"$(P)$(R)SetADC")
{
       field(DESC, "# of ADC readings to be taken")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setADC $(PORT)")
       field(LOW, "0")
       field(HIGH, "15")
       field(LSV, "MAJOR")
       field(HSV, "MAJOR")
       field(VAL, "1")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao,"$(P)$(R)ReadPeriod")
{
       field(DESC, "integration period in seconds")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readPeriod $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}


record(ao,"$(P)$(R)SetPeriod")
{
       field(DESC, "integration period in seconds")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setPeriod $(PORT)")
       field(LOW, ".000005")
       field(HIGH, "65")
       field(LSV, "MAJOR")
       field(HSV, "MAJOR")
       field(VAL, "1")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao,"$(P)$(R)ReadRange")
{
       field(DESC, "Current range in amps")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readRange $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}


record(ao,"$(P)$(R)SetRange")
{
       field(DESC, "Set current range in amps")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setRange $(PORT)")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao,"$(P)$(R)ReadRes")
{
       field(DESC, "Number of bits resolution")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readRes $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}

record(ao,"$(P)$(R)SetRes")
{
       field(DESC, "resolution in bits (16-20)")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setRes $(PORT)")
       field(LOW, "16")
       field(HIGH, "20")
       field(LSV, "MAJOR")
       field(HSV, "MAJOR")
       field(VAL, "16")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao,"$(P)$(R)ReadOpCondition")
{
       field(DESC, "Get operation register cond status bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readOpCondition $(PORT)")
       field(PINI, "YES")
}

record(ao,"$(P)$(R)ReadOpEvnt")
{
       field(DESC, "Get operatior register event bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readOpEvnt $(PORT)")
       field(PINI, "NO")
}

record(ao,"$(P)$(R)ReadOpEnable")
{
       field(DESC, "Get operation stat enable bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readOpEnable $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}

record(ao,"$(P)$(R)SetOpEnable")
{
       field(DESC, "Set operation stat enable bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setOpEnable $(PORT)")
       field(PINI, "NO")
}

record(ao,"$(P)$(R)ReadQCondition")
{
       field(DESC, "Get questionable cond status bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readQCondition $(PORT)")
       field(PINI, "YES")
}

record(ao,"$(P)$(R)ReadQEvnt")
{
       field(DESC, "Get questionable register event bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readQEvnt $(PORT)")
       field(PINI, "YES")
}

record(ao,"$(P)$(R)ReadQEnable")
{
       field(DESC, "Get questionable stat enable bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readQEnable $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}

record(ao,"$(P)$(R)SetQEnable")
{
       field(DESC, "Set questionable stat enable bit")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setQEnable $(PORT)")
       field(PINI, "NO")
}

################# Read Configure Switch
record(stringout, "$(P)$(R)ReadConfigureSwitch")
{
    field(DESC, "Read (reset,settle,Sw1offset,Sw1width")
    field(DTYP, "stream")
    field(OUT, "@IC101.proto readConfSwitch($(P)$(R)ReadReset,$(P)$(R)ReadSettle,$(P)$(R)ReadSw1Offset,$(P)$(R)ReadSw1Width) $(PORT)")
    field(PINI, "YES")
    field(SCAN, "1 second")
}
record(stringin,"$(P)$(R)ReadReset")
{
        field(DESC, "Read the reset")
        field(SCAN, "1 second")
}
record(stringin, "$(P)$(R)ReadSettle")
{
        field(DESC, "Read the settle")
        field(SCAN, "1 second")
}
record(stringin, "$(P)$(R)ReadSw1Offset")
{
        field(DESC, "Sw1 offset")
        field(SCAN, "1 second")
}
record(stringin, "$(P)$(R)ReadSw1Width")
{
        field(DESC, "Sw1 width in usec")
        field(SCAN, "1 second")
}
##########################

record(ao, "$(P)$(R)SetHVMax")
{
        field(DESC, "set max allowable high voltage (volts)")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto setHVMax $(PORT)")
        field(PINI, "NO")
        field(LOW, "200")
        field(HIGH, "3000")
        field(SCAN, "Passive")
}

record(ao, "$(P)$(R)GetHVMax")
{
        field(DESC, "get the max allowable voltage (volts)")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto getHVMax $(PORT)")
        field(PINI, "YES")
        field(SCAN, "1 second")
}

record(stringin, "$(P)$(R)ReadHV")
{       
        field(DESC, "Read HV output sense")
        field(DTYP, "stream") 
        field(INP, "@IC101.proto readHV $(PORT)")
        field(SCAN, ".5 second") 
}

record(ao,"$(P)$(R)ReadScale")
{
       field(DESC, "Scale factor for monitor")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readScale $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}

record(ao,"$(P)$(R)SetScale")
{
       field(DESC, "1.00 default scale factor")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setScale $(PORT)")
       field(VAL, "1.00")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao,"$(P)$(R)SetDelay")
{
       field(DESC, "Set delay for message trigger mode")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setDelay $(PORT)")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao,"$(P)$(R)ReadDelay")
{
       field(DESC, "Trigger delay for message trig mode")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto readDelay $(PORT)")
       field(PINI, "YES")
       field(SCAN, "1 second")
}

record(ao,"$(P)$(R)SetVoltage")
{
       field(DESC, "Device Voltage between 200 and 3000 V")
       field(DTYP, "stream")  
       field(OUT, "@IC101.proto setVoltage $(PORT)")
       field(LOW, "200")
       field(HIGH, "3000")
       field(LSV, "MAJOR")
       field(HSV, "MAJOR")
       field(VAL, "200")
       field(PINI, "NO")
       field(SCAN, "Passive")
}

record(ao, "$(P)$(R)ReadVoltage")
{       
        field(DESC, "Get external high voltage")
        field(DTYP, "stream") 
        field(OUT, "@IC101.proto readVoltage $(PORT)")
        field(PINI, "YES")
        field(SCAN, "1 second") 
}

record(ai, "$(P)$(R)Abort")
{
        field(DESC, "Abort Measurement")
        field(DTYP, "stream")
        field(INP, "@IC101.proto abort $(PORT)")
        field(PINI, "YES")
        field(SCAN, "Passive")
}

record(ao, "$(P)$(R)ReadEvntStat")
{
        field(DESC, "Get state of the event status enable")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto readEvntStat $(PORT)")
        field(PINI, "YES")
        field(SCAN, "1 second")
}

record(ao, "$(P)$(R)SetEvntStat")
{
        field(DESC, "Query state of event status enable")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto setEvntStat $(PORT)")
        field(PINI, "NO")
        field(SCAN, "Passive")
}

record(ai, "$(P)$(R)RecallCalib")
{
        field(DESC, "Recall the stored calibration")
        field(DTYP, "stream")
        field(INP, "@IC101.proto recallCalib $(PORT)")
        field(PINI, "YES")
        field(SCAN, "10 second")
}

record(ao, "$(P)$(R)Save")
{
        field(DESC, "reset device to default conditions")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto save $(PORT)")
        field(PINI, "NO")
        field(SCAN, "Passive")
}

record(ao, "$(P)$(R)Init")
{
        field(DESC, "Initiate readings on valid trigger")
        field(DTYP, "stream")
        field(OUT, "@IC101.proto init $(PORT)")
        field(PINI, "NO")
        field(SCAN, "Passive")
}

record(ai, "$(P)$(R)SaveCalib")
{
        field(DESC, "Save present state to EEPROM")
        field(DTYP, "stream")
        field(INP, "@IC101.proto saveCalib $(PORT)")
        field(PINI, "NO")
        field(SCAN, "Passive")
}

##################################work in progress ############
#error 

#### write multiple values
#record (calcout, "$(P)$(R)SetConfigureSwitch") {
#  field (INPA, "$(P)$(R)SetReset")
#  field (INPB, "$(P)$(R)SetSettle")
#  field (INPC, "$(P)$(R)SetSw1Output")
#  field (INPD, "$(P)$(R)SetSw1Width")
#  field (CALC, "0")
#  field (DTYP, "stream")
#  field (OUT, "@IC101.proto setConfigureSwitch $(BUS)")
#}
#record(ai, "$(P)$(R)SetTheReset"){}
#record(ai, "$(P)$(R)SetSettle"){}
#record(ai, "$(P)$(R)SetSw1Output"){}
#record(ai, "$(P)$(R)SetSw1Width"){}

########################################################
#record(stringout, "$(P)$(R)GainChannel1")
#{
#        field(DESC, "Set gain for Channel 1")
#        field(DTYP, "stream")
#        field(OUT, "@IC101.proto setCalibGain($(P)$(R)GainChannel1, $(P)$(R)GainChannel2, $(P)$(R)GainChannel3) $(PORT)")
#        field(PINI, "NO")
#        field(SCAN, "Passive")
#}
#
#record(stringout, "$(P)$(R)GainChannel2")
#{
#        field(DESC, "Set gain for Channel 2")
#        field(DTYP, "stream")
#        field(OUT, "@IC101.proto setCalibGain($(P)$(R)GainChannel1, $(P)$(R)GainChannel2, $(P)$(R)GainChannel3) $(PORT)")
#        field(PINI, "NO")
#        field(SCAN, "Passive")
#}
#
#record(stringout, "$(P)$(R)GainChannel3")
#{
#        field(DESC, "Set gain for Channel 3")
#        field(DTYP, "stream")
#        field(OUT, "@IC101.proto setCalibGain($(P)$(R)GainChannel1, $(P)$(R)GainChannel2, $(P)$(R)GainChannel3) $(PORT)")
#        field(PINI, "NO")
#        field(SCAN, "Passive")
#}
#
##############################################################



